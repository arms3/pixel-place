// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { CleanupOldPixels } from "./cleanup_old_pixels_reducer.ts";
export { CleanupOldPixels };
import { SetPixel } from "./set_pixel_reducer.ts";
export { SetPixel };
import { SetPixels } from "./set_pixels_reducer.ts";
export { SetPixels };

// Import and reexport all table handle types
import { CleanupScheduleTableHandle } from "./cleanup_schedule_table.ts";
export { CleanupScheduleTableHandle };
import { PixelTableHandle } from "./pixel_table.ts";
export { PixelTableHandle };

// Import and reexport all types
import { CleanupSchedule } from "./cleanup_schedule_type.ts";
export { CleanupSchedule };
import { Pixel } from "./pixel_type.ts";
export { Pixel };
import { PixelUpdate } from "./pixel_update_type.ts";
export { PixelUpdate };

const REMOTE_MODULE = {
  tables: {
    cleanup_schedule: {
      tableName: "cleanup_schedule",
      rowType: CleanupSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
    },
    pixel: {
      tableName: "pixel",
      rowType: Pixel.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
  },
  reducers: {
    cleanup_old_pixels: {
      reducerName: "cleanup_old_pixels",
      argsType: CleanupOldPixels.getTypeScriptAlgebraicType(),
    },
    set_pixel: {
      reducerName: "set_pixel",
      argsType: SetPixel.getTypeScriptAlgebraicType(),
    },
    set_pixels: {
      reducerName: "set_pixels",
      argsType: SetPixels.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "CleanupOldPixels", args: CleanupOldPixels }
| { name: "SetPixel", args: SetPixel }
| { name: "SetPixels", args: SetPixels }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  cleanupOldPixels(arg: CleanupSchedule) {
    const __args = { arg };
    let __writer = new BinaryWriter(1024);
    CleanupOldPixels.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cleanup_old_pixels", __argsBuffer, this.setCallReducerFlags.cleanupOldPixelsFlags);
  }

  onCleanupOldPixels(callback: (ctx: ReducerEventContext, arg: CleanupSchedule) => void) {
    this.connection.onReducer("cleanup_old_pixels", callback);
  }

  removeOnCleanupOldPixels(callback: (ctx: ReducerEventContext, arg: CleanupSchedule) => void) {
    this.connection.offReducer("cleanup_old_pixels", callback);
  }

  setPixel(x: number, y: number, color: string) {
    const __args = { x, y, color };
    let __writer = new BinaryWriter(1024);
    SetPixel.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_pixel", __argsBuffer, this.setCallReducerFlags.setPixelFlags);
  }

  onSetPixel(callback: (ctx: ReducerEventContext, x: number, y: number, color: string) => void) {
    this.connection.onReducer("set_pixel", callback);
  }

  removeOnSetPixel(callback: (ctx: ReducerEventContext, x: number, y: number, color: string) => void) {
    this.connection.offReducer("set_pixel", callback);
  }

  setPixels(pixels: PixelUpdate[]) {
    const __args = { pixels };
    let __writer = new BinaryWriter(1024);
    SetPixels.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_pixels", __argsBuffer, this.setCallReducerFlags.setPixelsFlags);
  }

  onSetPixels(callback: (ctx: ReducerEventContext, pixels: PixelUpdate[]) => void) {
    this.connection.onReducer("set_pixels", callback);
  }

  removeOnSetPixels(callback: (ctx: ReducerEventContext, pixels: PixelUpdate[]) => void) {
    this.connection.offReducer("set_pixels", callback);
  }

}

export class SetReducerFlags {
  cleanupOldPixelsFlags: CallReducerFlags = 'FullUpdate';
  cleanupOldPixels(flags: CallReducerFlags) {
    this.cleanupOldPixelsFlags = flags;
  }

  setPixelFlags: CallReducerFlags = 'FullUpdate';
  setPixel(flags: CallReducerFlags) {
    this.setPixelFlags = flags;
  }

  setPixelsFlags: CallReducerFlags = 'FullUpdate';
  setPixels(flags: CallReducerFlags) {
    this.setPixelsFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get cleanupSchedule(): CleanupScheduleTableHandle {
    return new CleanupScheduleTableHandle(this.connection.clientCache.getOrCreateTable<CleanupSchedule>(REMOTE_MODULE.tables.cleanup_schedule));
  }

  get pixel(): PixelTableHandle {
    return new PixelTableHandle(this.connection.clientCache.getOrCreateTable<Pixel>(REMOTE_MODULE.tables.pixel));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
